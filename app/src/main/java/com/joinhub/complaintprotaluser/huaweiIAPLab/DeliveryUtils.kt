package com.joinhub.complaintprotaluser.huaweiIAPLab

import android.annotation.SuppressLint
import android.content.Context
import android.text.TextUtils

object DeliveryUtils {

    private const val PURCHASETOKEN_KEY = "purchasetokenSet"

    // Key value to store the number of gems.
    private const val GEMS_COUNT_KEY = "gemsCount"

    // The name of the SharedPreferences.
    private const val DATA_NAME = "database"

    /**
     * Obtains the map which stores the number of gems corresponding to an product.
     *
     * @return Map
     */
    private val numOfGems: Map<String, Int?>
        private get() {
            val map: MutableMap<String, Int?> = HashMap()
            map["CProduct01"] = 5
            map["CProduct02"] = 10
            return map
        }

    /**
     * Determine whether the purchased goods have been shipped.
     *
     * @param context Context.
     * @param purchasetoken Generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData.
     * @return boolean
     */
    fun isDelivered(context: Context, purchasetoken: String): Boolean {
        val sharedPreferences = context.getSharedPreferences(DATA_NAME, Context.MODE_PRIVATE)
        val stringSet = sharedPreferences.getStringSet(PURCHASETOKEN_KEY, null)
        return if (stringSet != null && stringSet.contains(purchasetoken)) {
            true
        } else false
    }

    /**
     * Ship and return the shipping result.
     *
     * @param context Context.
     * @param productId Id of the purchased product.
     * @param purchaseToken Generated by the Huawei payment server during product payment and returned to the app through InAppPurchaseData.
     * @return boolean
     */
    @SuppressLint("MutatingSharedPrefs")
    fun deliverProduct(context: Context, productId: String?, purchaseToken: String): Boolean {
        if (TextUtils.isEmpty(productId) || TextUtils.isEmpty(purchaseToken)) {
            return false
        }
        if (!numOfGems.containsKey(productId)) {
            return false
        }
        val sharedPreferences = context.getSharedPreferences(DATA_NAME, Context.MODE_PRIVATE)
        val editor = sharedPreferences.edit()
        var count = sharedPreferences.getLong(GEMS_COUNT_KEY, 0)
        count += numOfGems[productId]!!
        editor.putLong(GEMS_COUNT_KEY, count)
        val stringSet = sharedPreferences.getStringSet(PURCHASETOKEN_KEY, HashSet())
        stringSet!!.add(purchaseToken)
        editor.putStringSet(PURCHASETOKEN_KEY, stringSet)
        return editor.commit()
    }

    fun getCountOfGems(context: Context): Long {
        val sharedPreferences = context.getSharedPreferences(DATA_NAME, Context.MODE_PRIVATE)
        return sharedPreferences.getLong(GEMS_COUNT_KEY, 0)
    }

}